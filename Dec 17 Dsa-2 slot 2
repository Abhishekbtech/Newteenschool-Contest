K- type mangroov(Contest)
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
        // Your code here
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }

       
        Map<Integer, Integer> countMap = new HashMap<>();
        for (int mangroove : arr) {
            countMap.put(mangroove, countMap.getOrDefault(mangroove, 0) + 1);
        }
        for (int i = 1; i <= k; i++) {
            int count = countMap.getOrDefault(i, 0);
            System.out.println(count);
        }
    }
}


Sara's Students (Contest)
/*
class Node {
    Node next;
    int val;

    Node(int val) {
        this.val = val;
        next = null;
    }
}
*/
public static int maxChocolates(Node head) {
//Enter your code here
    Node slow = head, fast =head, prev = null;
    while(fast != null && fast.next != null){
        prev = slow;
        slow = slow.next;
        fast = fast.next.next;
    }
    prev.next =null;

    Node firstHafe = head;
    Node secondHafe = slow;
    prev = null;
    Node curr = secondHafe;

    while(curr != null){
        Node temp = curr.next;
        curr.next =prev;
        prev = curr;
        curr = temp;
    }

    int maxi =0;
    secondHafe = prev;
    while(firstHafe !=null && secondHafe != null){
        maxi = Math.max(firstHafe.val + secondHafe.val, maxi);
        firstHafe = firstHafe.next;
        secondHafe = secondHafe.next;
    }
    return maxi;
}
