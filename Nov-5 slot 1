Smaller elements
static int smallerElements(int a[], int n, int k){
    //Enter your code here
    int left = 0;
    int right = n - 1;
    int count = 0;
    while(left <= right){
        int mid = left + (right - left) / 2;
        if(a[mid] <= k){
            left = mid + 1;
            count = mid +1;
        }else{
            right = mid - 1;
        }
    }
    return count;
}



Find Bad Number
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
        // Your code here
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int x = sc.nextInt();
        int []arr = new int[n];
        for(int i=0; i<n; i++){
            arr[i] = sc.nextInt();
        }
        findBadNumber(arr, n, x);
    }

    public static void findBadNumber(int []arr, int n, int x){
        for(int array : arr){
            boolean isPowerOfX = false;
            for(int i=0; i<n; i++){
                if(Math.pow(x, i) == array){
                    isPowerOfX = true;
                    break;
                }
            }
            if(!isPowerOfX){
                System.out.println(array);
                break;
            }
        }
    }
}



Length of a number
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
        // Your code here
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int j=0; j<T; j++){
            int n = sc.nextInt();
            int count = 0;
            while(n != 0){
                n /= 10;
                count++;
            }
            System.out.println(count);
        }
    }
}
