Longest Substring Of All Vowels in Order (Contest)
class Solution {
    public int longestBeautifulSubstring(String word) {
        // enter your code here. 
        int result = 0;
        int currentLength = 1;
        int vowelsCount = 1; 

        for (int i = 1; i < word.length(); i++) {
            if (word.charAt(i) == word.charAt(i - 1)) {
                currentLength++;
            } else if (word.charAt(i) > word.charAt(i - 1)) {
                currentLength++;
                vowelsCount++;
            } else {
                currentLength = 1;
                vowelsCount = 1;
            }

            if (vowelsCount == 5) {
                result = Math.max(result, currentLength);
            }
        }

        return result;   
    }
}



Buy Pizzas (Contest)
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
        // Your code here
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] pizzas = new int[N];
        for (int i = 0; i < N; i++) {
            pizzas[i] = scanner.nextInt();
        }

        int timeTaken = timeRequiredToBuy(pizzas, K);
        System.out.println(timeTaken);
    }

    public static int timeRequiredToBuy(int[] tickets, int k) {
        Queue<Integer> q = new ArrayDeque<>();
        int size = tickets.length, counter = 0;
        boolean flag = true;
        for(int i = 0;i < tickets.length;i++)
            q.add(tickets[i]);
        while(flag){
            for(int i = 0;i < size && !q.isEmpty();i++){
                int temp = q.remove() - 1;
                if(i == k && temp == 0){
                    flag = false;
                    counter++;
                    break;
                }
                q.add(temp);
                if(temp >= 0) counter++;
            }
        }
        return counter;
    }
}


Minimum no. of Operations (Contest)
#include <bits/stdc++.h>
using namespace std;

vector<int> good;

void init() {
  for(int i = 0; i <= 30; ++i) {
    for(int j = i+1; j <= 30; ++j) {
      long long x = (1ll << i) + (1ll << j);
      if (x <= 2000000000) {
        good.push_back(x);
      }
    }
  }
}

int absi(int x) {
  return (x < 0 ? -x : x);
}

int main() {
  ios_base::sync_with_stdio(false);
  init();
  int t, n;
  cin >> t;
  while(t--) {
    cin >> n;
    int ans = INT_MAX;
    for(int i = 0; i < good.size(); ++i) {
      ans = min(ans, absi(good[i] - n));
    }
    cout << ans << "\n";
  }
  return 0;
}


Finding roots
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework
import static java.lang.Math.*;

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
        // Your code here
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int c = scanner.nextInt();
        
        findRoots(a, b, c);
    }

    static void findRoots(int a, int b, int c){
        int d = b * b - 4 * a * c;
        double sqrt_val = sqrt(abs(d));
 
        if (d > 0) {
            double abhi = (double)(-b + sqrt_val)/ (2 * a);
            double cha = (double)(-b - sqrt_val)/(2 * a);
            System.out.printf("%.2f\n", abhi);
            System.out.printf("%.2f\n", cha);
        }
        else if (d == 0) {
            double abhi = -(double)b/(2*a);
            double cha = -(double)b/(2*a);
            System.out.printf("%2f\n", abhi);
            System.out.printf("%2f\n", cha);
        }
        else{
            double abhi = -(double)b/(2*a);
            double bhi = sqrt_val/(2*a);
            double cha = -(double)b/(2*a);
            double ch = sqrt_val/(2*a);
            System.out.printf("%.2f+i%.2f\n", abhi, bhi);
            System.out.printf("%.2f-i%.2f", cha, ch);
        }
    }
}
