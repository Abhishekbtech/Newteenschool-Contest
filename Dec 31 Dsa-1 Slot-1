Network of String (Contest)
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
       Scanner sc = new Scanner(System.in);
       int test = sc.nextInt();
       for(int tt=0;tt<test;tt++){
           int n = sc.nextInt();
           String s = sc.next();
           int ans = 0;
           int i = 0;
           while(i<n){
               char curr = s.charAt(i);
               int freq = 0;
               while(i<n && curr==s.charAt(i)){
                   i++;
                   freq++;
               }
               ans += (freq/2)+(freq%2);
           }
           System.out.println(ans);
       }
    }
}


Operation Matrix (Contest)
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
        // Your code here
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int K = scanner.nextInt();

        int[][] matrix = new int[N][M];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }

        for (int op = 0; op < K; op++) {
            int R = scanner.nextInt();
            int C = scanner.nextInt();
            int S = scanner.nextInt(); 
            int D = scanner.nextInt(); 

            for (int i = R - 1; i < R - 1 + S && i < N; i++) {
                for (int j = C - 1; j < C - 1 + S && j < M; j++) {
                    matrix[i][j] += D;
                }
            }
        }

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
    }
}


Eliminate numbers(Contest)
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
        // Your code here
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println(lastRemaining(n));
    }
    
    public static int lastRemaining(int num) {
        boolean leftToRight = true;
        int remaining = num;
        int step = 1;
        int head = 1;

        while (remaining > 1) {
            if (leftToRight || remaining % 2 == 1) {
                head = head + step;
            }
            remaining /= 2;
            step *= 2;
            leftToRight = !leftToRight;
        }

        return head;
    }
}


Different ways to add parenthesis-2(Contest)
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static List<Integer> diffWaysToCompute(String input) {
        List<Integer> result = new ArrayList<>();

        for (int i = 0; i < input.length(); i++) {
            char c = input.charAt(i);
            if (c == '+' || c == '-' || c == '*') {
                String leftPart = input.substring(0, i);
                String rightPart = input.substring(i + 1);

                List<Integer> leftResults = diffWaysToCompute(leftPart);
                List<Integer> rightResults = diffWaysToCompute(rightPart);

                for (int left : leftResults) {
                    for (int right : rightResults) {
                        int res = 0;
                        switch (c) {
                            case '+':
                                res = left + right;
                                break;
                            case '-':
                                res = left - right;
                                break;
                            case '*':
                                res = left * right;
                                break;
                        }
                        result.add(res);
                    }
                }
            }
        }

        if (result.isEmpty()) {
            result.add(Integer.valueOf(input));
        }

        return result;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String expression = sc.nextLine();
        List<Integer> results = diffWaysToCompute(expression);

 
        results.sort(Integer::compareTo);
        for (int res : results) {
            System.out.print(res + " ");
        }
    }
}


Maximum Chocolates (Contest)
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
        // Your code here
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] matrix = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }

        int result = maximumChocolates(matrix, n, m);
        System.out.println(result);
    }

    private static int maximumChocolates(int[][] matrix, int n, int m) {
        int result = 0;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (matrix[i][j] == 1) {
                    matrix[i][j] += matrix[i - 1][j];
                }
            }
        }

        for (int i = 0; i < n; i++) {
            result = Math.max(result, maxArea(matrix[i]));
        }

        return result;
    }

    private static int maxArea(int[] heights) {
        Stack<Integer> stack = new Stack<>();
        int maxArea = 0;
        int i = 0;

        while (i < heights.length) {
            if (stack.isEmpty() || heights[i] >= heights[stack.peek()]) {
                stack.push(i);
                i++;
            } else {
                int top = stack.pop();
                int width = stack.isEmpty() ? i : i - stack.peek() - 1;
                maxArea = Math.max(maxArea, heights[top] * width);
            }
        }

        while (!stack.isEmpty()) {
            int top = stack.pop();
            int width = stack.isEmpty() ? i : i - stack.peek() - 1;
            maxArea = Math.max(maxArea, heights[top] * width);
        }

        return maxArea;
    }
}
