OR of AND with middle (Contest)
public static int orOfAnd(Node head) {
        if (head == null || head.next == null) {
            return -1;
        }

        int count = 0;
        Node mid = head;
        Node current = head;
        while (current != null) {
            if (count % 2 == 1) {
                mid = mid.next;
            }
            current = current.next;
            count++;
        }

        int result = 0;
        current = head;
        while (current != null) {
            result |= (current.val & mid.val);
            current = current.next;
        }

        return result;
}


Yet another divisor maximization problem
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
        long n = sc.nextInt();
        long m = sc.nextInt();

        long sqrt = (long)Math.sqrt(m);
        long maxi = 0;
        for(int i=1;i<=sqrt;i++){
            if(m%i==0){
                long div1 = i;
                long div2 = m/i;
                
                if(m/div1>=n){
                    maxi = Math.max(maxi, div1);
                }
                if(m/div2>=n){
                    maxi = Math.max(maxi, div2);
                }
               
            }
        }
        System.out.println(maxi);
    }
}


Batting Score (Contest)
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] scores = new int[n];

        for (int i = 0; i < n; i++) {
            scores[i] = scanner.nextInt();
        }

        int[] answer = waitForGreaterScores(scores);
        for (int num : answer) {
            System.out.print(num + " ");
        }
    }

    public static int[] waitForGreaterScores(int[] scores) {
        int n = scores.length;
        int[] answer = new int[n];

        Stack<Integer> stack = new Stack<>();
        stack.push(0);

        for (int i = 1; i < n; i++) {
            while (!stack.isEmpty() && scores[i] > scores[stack.peek()]) {
                answer[stack.peek()] = i - stack.peek();
                stack.pop();
            }
            stack.push(i);
        }

        return answer;
    }
}


Squid game (contest)
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        Deque<Character> q = new ArrayDeque<>();
        String str = scanner.next();
        for(int i=0; i<N; i++){
            q.addLast(str.charAt(i));
        }
        while(q.size() > 1){
            char ch1 = q.removeFirst();
            int count = 0;
            while(!q.isEmpty() && q.peek() == ch1){
                count++;
                q.removeFirst();
            }
            if(!q.isEmpty()){
                q.removeFirst();
                while(count > 0){
                    q.addFirst(ch1);
                    count--;
                }
                q.addLast(ch1);
            }else{
                q.addFirst(ch1);
                break;
            }
        }
        System.out.println(q.poll());
    }
}
