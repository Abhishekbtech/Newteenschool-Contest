Candy Shopping
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
        // Your code here
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        long M = sc.nextLong();

        int []arr = new int[N];
        for(int i=0; i<N; i++){
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);
        int count = 0;
        for(int i=0; i<N; i++){
            if(M >= arr[i]){
                M -= arr[i];
                count++;
            }else{
                break;
            }
        }

        System.out.println(count);
    }
}



Guardians of Galaxy
import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
        // Your code here
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int []arr = new int[n];
        for(int i=0; i<n; i++){
            arr[i] = sc.nextInt();
        }

        long ans = 0;
        long l = 0, r=10000000000L;
        while(l<=r){
            long mid = (l+r)/2;
            boolean res = isPossibleWithEngergy(arr, mid);
            if(res){
                ans = mid;
                r = mid - 1;
            }else{
                l = mid + 1;
            }
        }

        System.out.print(ans);
    }

    public static boolean isPossibleWithEngergy(int []arr, long energy){
        for(int i=0; i<arr.length; i++){
            if(energy >= arr[i]){
                energy = energy + (energy - arr[i]);
            }else{
                energy = energy - (arr[i] - energy);
            }
            if(energy > 10000000000L){
                return true;
            }
            if(energy < 0){
                return false;
            }
        }
        return true;
    }

}



Encoded String
public static String decodeString(String s) {
    // Write your code here
    StringBuilder result = new StringBuilder();
    int i = 0;
    while(i < s.length()){
        if(Character.isDigit(s.charAt(i))){
            int start = i;
            while(Character.isDigit(s.charAt(i))){
                i++;
            }
            int k = Integer.parseInt(s.substring(start, i));
            i++;
            int openBrackets = 1;
            int closeBrackets = 0;
            start = i;

            while(openBrackets != closeBrackets){
                if(s.charAt(i) == '{'){
                    openBrackets++;
                }else if(s.charAt(i) == '}'){
                    closeBrackets++;
                }
                i++;
            }
            String encodedString = s.substring(start, i-1);
            String decodedString = decodeString(encodedString);

            for(int j=0; j<k;j++){
                result.append(decodedString);
            }
        }else{
            result.append(s.charAt(i));
            i++;
        }
    }
    return result.toString();
}



Help Bob (Contest)
class Solution {
    public boolean isTarget(int start, int[] nums, int target) {
        // Write your code here
        if(target == 0){
            return true;
        }
        if(start >= nums.length){
            return false;
        }
        
        return isTarget(start + 1, nums, target -nums[start]) || isTarget(start + 1, nums, target);
    }
}
